var _startX = 0;            // mouse starting positions
var _startY = 0;
var _offsetX = 0;           // current element offset
var _offsetY = 0;
var _dragElement;           // needs to be passed from OnMouseDown to OnMouseMove
var _oldZIndex = 0;         // we temporarily increase the z-index during drag
var _debug = document.getElementById('_debug');    // makes life easier

InitDragDrop();

function InitDragDrop() {
    document.onmousedown = OnMouseDown;
    document.onmouseup = OnMouseUp;
}

function OnMouseDown(e) {
    // IE is retarded and doesn't pass the event object
    if (e == null)
        e = window.event;

    // IE uses srcElement, others use target
    var target = e.target != null ? e.target : e.srcElement;

    if (_debug) {
        _debug.innerHTML = target.className == 'dragByHere'
			? 'draggable element clicked'
			: 'NON-draggable element clicked';
    }

    var ancestorDragByHere = findAncestor(target, "dragByHere");
    var ancestorDrag = findAncestor(target, "drag");

    // for IE, left click == 1
    // for Firefox, left click == 0
    if ((e.button == 1 && window.event != null || e.button == 0) &&
		(target.classList.contains('dragByHere') ||
			(ancestorDragByHere) ||
			(!target.querySelector(".dragByHere") && (target.classList.contains('drag') || ancestorDrag))
		)
	) {
        // grab the mouse position
        _startX = e.clientX;
        _startY = e.clientY;

        var draggable = null;

        if (ancestorDrag && (target.classList.contains('dragByHere') || ancestorDragByHere)) {
            draggable = ancestorDrag;
        }
        else if (!target.classList.contains('dragByHere') && !ancestorDragByHere) {
            if (ancestorDrag && !ancestorDrag.querySelector('.dragByHere')) {
                draggable = ancestorDrag;
            }
            else if (target.classList.contains('drag') && !target.querySelector('.dragByHere')) {
                draggable = target
            }
        }

        if (draggable) {
            // grab the clicked element's position
            _offsetX = ExtractNumber(draggable.style.left);
            _offsetY = ExtractNumber(draggable.style.top);

            // we need to access the element in OnMouseMove
            _dragElement = draggable;

            // bring the clicked element to the front while it is being dragged
            _oldZIndex = draggable.style.zIndex;
            _dragElement.style.zIndex = 10000;

            // tell our code to start moving the element with the mouse
            document.onmousemove = OnMouseMove;

            // cancel out any text selections
            document.body.focus();

            // prevent text selection in IE
            document.onselectstart = function () { return false; };
            // prevent IE from trying to drag an image
            _dragElement.ondragstart = function () { return false; };

            // prevent text selection (except IE)
            return false;
        }

    }
}

function OnMouseMove(e) {
    if (e == null)
        var e = window.event;

    // this is the actual "drag code"
    _dragElement.style.left = (_offsetX + e.clientX - _startX) + 'px';
    _dragElement.style.top = (_offsetY + e.clientY - _startY) + 'px';

    if (_debug) {
        _debug.innerHTML = '(' + _dragElement.style.left + ', ' +
			_dragElement.style.top + ')';
    }
}

function OnMouseUp(e) {
    if (_dragElement != null) {
        _dragElement.style.zIndex = _oldZIndex;

        // we're done with these events until the next OnMouseDown
        document.onmousemove = null;
        document.onselectstart = null;
        _dragElement.ondragstart = null;

        // this is how we know we're not dragging      
        _dragElement = null;

        if (_debug) {
            _debug.innerHTML = 'mouse up';
        }
    }
}

function ExtractNumber(value) {
    var n = parseInt(value);
    return n == null || isNaN(n) ? 0 : n;
}

function findAncestor(el, cls) {
    while ((el = el.parentElement) && !el.classList.contains(cls));
    return el;
}